# .github/workflows/deploy-server.yml
name: Deploy Server to AWS EC2

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'server/**'

jobs:
  deploy-server:
    name: Deploy Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for faster checkout

      - name: Set Target Directory, App Name, and Secrets
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TARGET_DIR=e360-main" >> $GITHUB_ENV
            echo "APP_NAME=e360-consult" >> $GITHUB_ENV
            echo "AWS_HOST=${{ secrets.AWS_HOST_PROD }}" >> $GITHUB_ENV
            echo "AWS_USER=${{ secrets.AWS_USER_PROD }}" >> $GITHUB_ENV
            echo "AWS_PRIVATE_KEY=${{ secrets.AWS_PRIVATE_KEY_PROD }}" >> $GITHUB_ENV
            echo "SERVER_PORT=${{ secrets.SERVER_PORT_PROD }}" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_PROD }}" >> $GITHUB_ENV
            echo "JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "staging" ]; then
            echo "TARGET_DIR=e360-staging" >> $GITHUB_ENV
            echo "APP_NAME=e360-consult-staging" >> $GITHUB_ENV
            echo "AWS_HOST=${{ secrets.AWS_HOST }}" >> $GITHUB_ENV
            echo "AWS_USER=${{ secrets.AWS_USER }}" >> $GITHUB_ENV
            echo "AWS_PRIVATE_KEY=${{ secrets.AWS_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          fi

      - name: Cache Server Dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-

      - name: Install and Build Server
        run: |
          cd server
          # Create .env file with necessary environment variables
          echo -e "NODE_ENV=production" > .env
          echo -e "PORT=${{ env.SERVER_PORT }}" >> .env
          echo -e "DB_URL=${{ env.DB_URL }}" >> .env
          echo -e "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          # Add other environment variables as needed

          npm ci
          npm run build

          # Handle potential nested dist folders
          if [ -d "dist/server/dist" ]; then
            mv dist/server/dist/* dist/
            rm -rf dist/server
          fi

          # Copy only .hbs files from templates folder to dist (preserve structure, skip .ts)
          rsync -av --include='*/' --include='*.hbs' --exclude='*.ts' --exclude='*' src/services/emails/templates/ dist/services/emails/templates/

          # Verify templates were copied
          echo "HBS template files copied:"
          find dist/services/emails/templates -name "*.hbs" | wc -l

      - name: Clean and Prepare Remote Server Directory
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.AWS_HOST }}
          username: ${{ env.AWS_USER }}
          key: ${{ env.AWS_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-new
            rm -rf /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-old

      - name: Deploy Server Files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.AWS_HOST }}
          username: ${{ env.AWS_USER }}
          key: ${{ env.AWS_PRIVATE_KEY }}
          source: "server/dist/, server/package*.json, server/.env"
          target: "/home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-new/"
          strip_components: 1
          concurrency: 10  # Increase concurrency for faster file transfer

      - name: Install Dependencies and Restart PM2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.AWS_HOST }}
          username: ${{ env.AWS_USER }}
          key: ${{ env.AWS_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-new
            npm ci --production --no-audit --prefer-offline
            
            # Setup PM2 config if needed
            cd /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/
            if [ ! -f "ecosystem.config.js" ]; then
              echo "Creating PM2 ecosystem config file"
              echo 'module.exports = {
                apps: [{
                  name: "${{ env.APP_NAME }}",
                  script: "server/dist/index.js",
                  env: {
                    NODE_ENV: "production",
                  },
                  watch: false,
                  max_memory_restart: "300M"
                }]
              }' > ecosystem.config.js
            fi
            
            # Swap directories and restart app
            if [ -d "/home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server" ]; then
              mv /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-old
            fi
            mv /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-new /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server
            sudo chown -R ubuntu:ubuntu /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server
            
            # Restart the application
            pm2 reload ecosystem.config.js --only ${{ env.APP_NAME }}
            
            # Clean up old directory after successful deployment
            rm -rf /home/ubuntu/e360consult/${{ env.TARGET_DIR }}/server-old